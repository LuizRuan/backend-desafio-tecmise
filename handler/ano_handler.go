// ============================================================================
// üìÑ handler/ano_handler.go
// ============================================================================
// üéØ Responsabilidade
// - Implementa endpoints REST para gerenciamento de "Ano e Turma" (tabela: anos)
//   * Listar anos do usu√°rio autenticado
//   * Criar novo ano vinculado ao usu√°rio
//   * Remover ano do usu√°rio (com remo√ß√£o em cascata dos estudantes do mesmo dono)
//
// üîê Autentica√ß√£o
// - Baseada no cabe√ßalho HTTP `X-User-Email` (email do usu√°rio j√° autenticado).
// - O helper `usuarioIDFromHeader` resolve o `usuario_id` a partir desse e-mail.
// - Todas as rotas retornam 401 quando o cabe√ßalho n√£o existe ou n√£o encontra usu√°rio.
//
// üß± Regras de escopo/seguran√ßa
// - Todas as queries incluem `usuario_id = $UID` para isolar os dados por dono.
// - A remo√ß√£o √© transacional: apaga estudantes do ano e, depois, o ano.
// - Retorna 404 quando o ano n√£o pertencer ao usu√°rio ou n√£o existir.
//
// üì§ Formato das respostas
// - JSON (`Content-Type: application/json`) para retornos com corpo.
// - 204 (No Content) para dele√ß√£o bem-sucedida.
// - Erros com mensagens claras e status apropriados.
//
// Endpoints cobertos:
// - GET    /api/anos            ‚Üí ListarAnosHandler
// - POST   /api/anos            ‚Üí CriarAnoHandler
// - DELETE /api/anos/{id}       ‚Üí RemoverAnoHandler
// ============================================================================

package handler

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strings"
)

// Ano representa um registro da tabela `anos`.
type Ano struct {
	ID   int    `json:"id"`   // identificador do ano/turma
	Nome string `json:"nome"` // nome exibido (ex.: "8¬∫ A")
}

// usuarioIDFromHeader resolve o id do usu√°rio a partir do cabe√ßalho X-User-Email.
//
// Fluxo:
//  1. L√™ e normaliza o valor de "X-User-Email".
//  2. Busca o id na tabela `usuarios`.
//  3. Retorna (id, nil) quando encontra; caso contr√°rio retorna erro.
//
// Retorna:
//   - (0, sql.ErrNoRows) quando o header est√° vazio ou n√£o encontra usu√°rio.
//   - Outros erros de banco quando a query falha.
func usuarioIDFromHeader(db *sql.DB, r *http.Request) (int, error) {
	email := strings.TrimSpace(r.Header.Get("X-User-Email"))
	if email == "" {
		return 0, sql.ErrNoRows
	}
	var id int
	err := db.QueryRow("SELECT id FROM usuarios WHERE email=$1", email).Scan(&id)
	return id, err
}

// ListarAnosHandler trata GET /api/anos
//
// Objetivo: listar exclusivamente os anos do usu√°rio autenticado.
//
// Regras/erros:
//   - 401 se n√£o conseguir resolver o usu√°rio pelo header.
//   - 500 se houver falha ao consultar/iterar o banco.
//   - 200 + JSON com array de anos quando OK.
func ListarAnosHandler(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîê Resolve o dono
		uid, err := usuarioIDFromHeader(db, r)
		if err != nil {
			http.Error(w, "Usu√°rio n√£o autenticado", http.StatusUnauthorized)
			return
		}

		// üì• Busca filtrando por `usuario_id`
		rows, err := db.Query(`
			SELECT id, nome
			  FROM anos
			 WHERE usuario_id = $1
			 ORDER BY id ASC
		`, uid)
		if err != nil {
			http.Error(w, "Erro ao listar anos: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		// üîÅ Varre resultados
		var anos []Ano
		for rows.Next() {
			var a Ano
			if err := rows.Scan(&a.ID, &a.Nome); err != nil {
				http.Error(w, "Erro ao ler ano: "+err.Error(), http.StatusInternalServerError)
				return
			}
			anos = append(anos, a)
		}

		// üì§ Retorno JSON
		w.Header().Set("Content-Type", "application/json")
		_ = json.NewEncoder(w).Encode(anos)
	}
}

// CriarAnoHandler trata POST /api/anos
//
// Objetivo: criar um novo ano vinculado ao usu√°rio autenticado.
//
// Corpo esperado (JSON):
//
//	{ "nome": "8¬∫ A" }
//
// Regras/erros:
//   - 401 se n√£o resolver usu√°rio.
//   - 400 se JSON inv√°lido ou nome vazio.
//   - 500 em erro de inser√ß√£o.
//   - 201 + JSON { id, nome } quando criado.
func CriarAnoHandler(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîê Resolve o dono
		uid, err := usuarioIDFromHeader(db, r)
		if err != nil {
			http.Error(w, "Usu√°rio n√£o autenticado", http.StatusUnauthorized)
			return
		}

		// üì® Decodifica & valida entrada
		var input struct {
			Nome string `json:"nome"`
		}
		if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
			http.Error(w, "JSON inv√°lido: "+err.Error(), http.StatusBadRequest)
			return
		}
		input.Nome = strings.TrimSpace(input.Nome)
		if input.Nome == "" {
			http.Error(w, "Nome do ano obrigat√≥rio", http.StatusBadRequest)
			return
		}

		// üß± Insere e retorna o id criado
		var novoID int
		err = db.QueryRow(`
			INSERT INTO anos (nome, usuario_id)
			VALUES ($1, $2) RETURNING id
		`, input.Nome, uid).Scan(&novoID)
		if err != nil {
			http.Error(w, "Erro ao criar ano: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// üì§ 201 + JSON
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		_ = json.NewEncoder(w).Encode(map[string]any{
			"id":   novoID,
			"nome": input.Nome,
		})
	}
}

// RemoverAnoHandler trata DELETE /api/anos/{id}
//
// Objetivo: remover um ano do usu√°rio e, em transa√ß√£o, apagar os estudantes
// vinculados a esse ano e ao mesmo usu√°rio.
//
// Regras/erros:
//   - 405 se m√©todo != DELETE.
//   - 401 se n√£o resolver usu√°rio.
//   - 400 se id ausente.
//   - 500 se falhar iniciar/execu√ß√£o/commit da transa√ß√£o.
//   - 404 se o ano n√£o existir para esse usu√°rio.
//   - 204 (No Content) quando removido com sucesso.
func RemoverAnoHandler(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// ‚úÖ Garante que √© DELETE (√∫til se roteador externo n√£o filtra)
		if r.Method != http.MethodDelete {
			http.Error(w, "M√©todo n√£o permitido", http.StatusMethodNotAllowed)
			return
		}

		// üîê Resolve o dono
		uid, err := usuarioIDFromHeader(db, r)
		if err != nil {
			http.Error(w, "Usu√°rio n√£o autenticado", http.StatusUnauthorized)
			return
		}

		// üîé Extrai o id simples da URL (ex.: "/api/anos/123" ‚Üí "123")
		idStr := strings.TrimPrefix(r.URL.Path, "/api/anos/")
		if strings.TrimSpace(idStr) == "" {
			http.Error(w, "ID do ano/turma n√£o informado", http.StatusBadRequest)
			return
		}

		// üîÑ Transa√ß√£o: remove estudantes e depois o ano
		tx, err := db.Begin()
		if err != nil {
			http.Error(w, "Erro ao iniciar transa√ß√£o", http.StatusInternalServerError)
			return
		}
		// rollback seguro caso haja qualquer erro posterior
		defer func() { _ = tx.Rollback() }()

		// 1) apaga estudantes do mesmo dono e ano
		if _, err := tx.Exec(
			`DELETE FROM estudantes WHERE ano_id=$1 AND usuario_id=$2`,
			idStr, uid,
		); err != nil {
			http.Error(w, "Erro ao remover estudantes vinculados", http.StatusInternalServerError)
			return
		}

		// 2) apaga o ano pertencente ao dono
		res, err := tx.Exec(
			`DELETE FROM anos WHERE id=$1 AND usuario_id=$2`,
			idStr, uid,
		)
		if err != nil {
			http.Error(w, "Erro ao remover ano/turma", http.StatusInternalServerError)
			return
		}

		// Se nenhuma linha foi afetada, o registro n√£o existe/pertence ao usu√°rio
		if rows, _ := res.RowsAffected(); rows == 0 {
			http.Error(w, "Ano/Turma n√£o encontrado", http.StatusNotFound)
			return
		}

		// 3) confirma a transa√ß√£o
		if err := tx.Commit(); err != nil {
			http.Error(w, "Erro ao confirmar exclus√£o", http.StatusInternalServerError)
			return
		}

		// ‚úÖ Sucesso sem corpo
		w.WriteHeader(http.StatusNoContent)
	}
}
