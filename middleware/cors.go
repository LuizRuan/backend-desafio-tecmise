// backend/middleware/cors.go
//
// Middleware respons√°vel por habilitar CORS (Cross-Origin Resource Sharing).
// Permite que clientes frontend hospedados em dom√≠nios diferentes do backend
// consigam consumir a API sem bloqueios do navegador.
//
// üîπ Como funciona:
//   - Adiciona cabe√ßalhos HTTP em todas as respostas:
//   - Access-Control-Allow-Origin: "*"   ‚Üí aceita requisi√ß√µes de qualquer origem
//   - Access-Control-Allow-Methods       ‚Üí define m√©todos HTTP aceitos (GET, POST, PUT, DELETE, OPTIONS)
//   - Access-Control-Allow-Headers       ‚Üí libera cabe√ßalhos personalizados usados no frontend
//   - Se a requisi√ß√£o for do tipo OPTIONS (pr√©-flight), retorna imediatamente 200 OK.
//   - Caso contr√°rio, passa o fluxo para o pr√≥ximo handler da cadeia.
//
// üîπ Pontos de aten√ß√£o:
//   - Em produ√ß√£o, o ideal √© substituir "*" por dom√≠nios espec√≠ficos confi√°veis.
//   - O cabe√ßalho "X-User-Email" foi inclu√≠do para permitir autentica√ß√£o/identifica√ß√£o
//     personalizada no frontend TecMise.
//
// üîπ Uso t√≠pico no main.go:
//
//	mux := http.NewServeMux()
//	handler := middleware.Cors(mux)
//	log.Fatal(http.ListenAndServe(":8080", handler))
package middleware

import "net/http"

// Cors adiciona os cabe√ßalhos necess√°rios para permitir requisi√ß√µes cross-origin
// e trata pr√©-flight requests (OPTIONS).
func Cors(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Define permiss√µes de origem, m√©todos e cabe√ßalhos
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, X-User-Email")

		// Se for pr√©-flight, retorna OK sem chamar o pr√≥ximo handler
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		// Encaminha requisi√ß√£o para o pr√≥ximo handler
		next.ServeHTTP(w, r)
	})
}
